//1. 'number' + 3 = number3
//2. number3 + 3 = number33 - так як "number" це строка йде конкатенація рядків, читається зліва направо
console.log('number' + 3 + 3);

//null + 3 = 3 - так як приведена арифметична операція, null приводиться до нуля
console.log(null + 3);

//5 && 'qwerty' = 'qwerty' - повернуло останній істинний операнд
console.log(5 && "qwerty");

//1. + '40' + + '2' = 42 - унарний плюс перед '40' перетворює на число, теж саме з '2'
//2. '42' + 'hillel' = 42hillel - далі виконується конкатенація рядків
console.log(+ '40' + + '2' + 'hillel');

//1. '10' - 5  = 5 - '10' автоматично перетворюється на число через мінус перед ним
//2. 5 === 6 = false - числа не рівні
console.log('10' - 5 === 6);

// true + false = 1 - true приводиться до 1, а false до нуля
console.log(true + false);

// '4px' - 3 = NaN - намагається преобразовати рядок в число, але це неможливо через наявність символів
console.log('4px' - 3);

//'4' - 3 = 1 - рядок '4' який преобразовується на число і після цього виконується арифметична операція - віднімання
console.log('4' - 3);

//1. 3 ** 0 = 1 - три зводить у ступінь нуль, будь-яке число в ступіні 0 = 1
//2. '6' + 1 = 61 - оператор '+' в контексті рядків виконується конкатенація
console.log('6' + 3 ** 0);

//12 / '6' = 2 - виконується автоматичне преобразовання рядка '6' в число перед виконуванням ділення
console.log(12 / '6');

//1. 5 === 6 = false - not equals
//2. '10' + false = 10false - відбувається конкатенація рядків
console.log('10' + (5 === 6));

//null == '' = false - null перетворюється на тип другого операнда, тобто 'null'
console.log(null == '');

//1. (9 / 3) = 3 - арифметичний вираз
//2. (3 ** 3) = 27 - зведення у ступінь
console.log(3 ** (9 / 3));

//1. !!'false' преобразується в true, тому що непустий рядок вважається істинним значенням як і з !!'true'
//2. порівнюємо 'true' == 'true' = true
console.log(!!'false' == !!'true');

//1. '0' && 1 = 1 - '0' є істинним значенням, тому результатом будет 1
//2. 0 || '0' && 1 = 1 - так як нуль не є істинним значенням, результатом вираза будет '0' && 1, що вже є один
console.log(0 || '0' && 1);

//1. унарний плюс перед null преобразується в число (нуль)
//2. false преобразовується також в число (нуль), таким чином, це рівняння істинно, тобто true ((0 == 0) = true)
//3. true в контексті зрівняння преобразується в 1. Тобто 1 < 1 = false
console.log((+null == false) < 1);

//1. false && true = false
//2. false || true = true
console.log(false && true || true);

//1. (false || true) = true
//2. false && true = false
console.log(false && (false || true));

//1. (+null == false) = true - унарний + перед null преобразується в нуль, а false преобразується також до числа (нуль), при порівнянні отримуємо true (0 == 0 = true)
//2. 1 ** 5 = 1
//3. true < 1 = false - true преобразується в 1, при порівнянні 1 < 1 = false
console.log((+null == false) < 1 ** 5);

